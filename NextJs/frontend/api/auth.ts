// src/lib/api/auth.ts

import { apiRequest, API_URL } from "./index";
import {
  setUser,
  setAccessToken,
  setRefreshToken,
  getAccessToken,
  getRefreshToken,
  clearAuthStorage,
} from "@/lib/storage";
import type { FullUserResponse, AuthResponse, UserRoleCheck } from "@/types";

// ------------------------------------------------------
// üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
// ------------------------------------------------------
export async function sendCode(phone: string) {
  return apiRequest<{ message: string }>("/auth/send-code/", {
    method: "POST",
    body: JSON.stringify({ phone }),
    enableRefresh: false,
  });
}

// ------------------------------------------------------
// üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
// ------------------------------------------------------
export async function register(username: string, phone: string, code: string) {
  const data = await apiRequest<AuthResponse>("/auth/signup/", {
    method: "POST",
    body: JSON.stringify({ username, phone, code }),
    enableRefresh: false,
  });

  setUser(data.user);
  setAccessToken(data.access);
  setRefreshToken(data.refresh);
  window.dispatchEvent(new Event("userLoggedIn"));

  return data;
}

// ------------------------------------------------------
// üîê –í—Ö–æ–¥
// ------------------------------------------------------
export async function login(phone: string, code: string) {
  const data = await apiRequest<AuthResponse>("/auth/login/", {
    method: "POST",
    body: JSON.stringify({ phone, code }),
    enableRefresh: false,
  });

  setUser(data.user);
  setAccessToken(data.access);
  setRefreshToken(data.refresh);
  window.dispatchEvent(new Event("userLoggedIn"));

  return data;
}

// ------------------------------------------------------
// üë§ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
// ------------------------------------------------------
export async function getFullUser() {
  const data = await apiRequest<FullUserResponse>("/auth/full/", {
    method: "GET",
  });
  setUser(data.user);
  return data;
}

// ------------------------------------------------------
// üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç)
// ------------------------------------------------------
export async function logout() {
  const access = getAccessToken();
  const refresh = getRefreshToken();

  try {
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º logout-–∑–∞–ø—Ä–æ—Å –Ω–∞ backend
    await fetch(`${API_URL}/auth/logout/`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...(access ? { Authorization: `Bearer ${access}` } : {}),
      },
      body: JSON.stringify({ refresh }),
    });
  } catch (e) {
    console.warn("Logout request failed:", e);
  } finally {
    // –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
    try {
      localStorage.clear();
    } catch (err) {
      console.warn("Failed to clear localStorage:", err);
    }

    // –æ—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    clearAuthStorage();

    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    window.dispatchEvent(new Event("userLoggedOut"));

    // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    window.location.href = "/";
  }
}

// ------------------------------------------------------
// üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
// ------------------------------------------------------
export async function getUserRole() {
  return apiRequest<UserRoleCheck>("/auth/role-check/", { method: "GET" });
}
